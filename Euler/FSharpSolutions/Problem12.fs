(*
    Problem12.fs
        The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
        We can see that 28 is the first triangle number to have over five divisors.

        What is the value of the first triangle number to have over five hundred divisors?

        Solution Notes:

        I first tried this the naive way (Divisor_Count counted individual divisors up to N/2) but that did not go well.
        Once I switched to a slightly smarter Divisor_Count function, the answer was computed quickly

	(c) Copyright 2011, Bret Ambrose (mailto:bretambrose@gmail.com).

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
*)

module Problem12

open System

let Divisor_Count ( n : uint64 ) =
    if n <= 1UL then
        1
    else
        let mutable divisors = 2;
        let mutable i = 2UL
        let max_factor = uint64 <| sqrt ( double n )    // if we count the divisors in associated pairs we only have to go up to sqrt(n) in our divisor search
        if max_factor * max_factor = n then             // if the sqrt is integral, add a single divisor
            divisors <- divisors + 1

        while i < max_factor do
            if n % i = 0UL then
                divisors <- divisors + 2    // count i and n/i divisors together
            i <- i + 1UL

        divisors;;

let Problem12_v1 n =
    let mutable triangle_factor = 2UL
    let mutable triangle_number = 1UL
    let mutable divisor_count = 1
    while divisor_count <= n do
        triangle_number <- triangle_number + triangle_factor
        triangle_factor <- triangle_factor + 1UL
        divisor_count <- Divisor_Count triangle_number

    triangle_number;;
    

let Problem12_v1_Interactive() =
    printfn "Problem 12:  What is the value of the first triangle number to have over N divisors?, where N = 500."
    printfn "Input alternate N:"
    let N_string = Console.ReadLine()
    let success, N = Int32.TryParse N_string
    if success = true then
        let result_N = Problem12_v1 N
        printfn "For N = %d, the answer is %d" N result_N
    ();;



